datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

model Course {
  id          String    @id @default(uuid())
  userId      String
  title       String    @db.LongText
  description String?   @db.LongText
  imageUrl    String?   @db.LongText
  isPublished Boolean   @default(false)
  firstExam   Boolean?  @default(false)
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])

  chapters    Chapter[]
  attachments Attachment[]
  exams       Exam[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([categoryId])
  @@fulltext([title])
}

model Category {
  id      String   @id @default(uuid())
  name    String   @unique
  courses Course[]
}

model Attachment {
  id   String @id @default(uuid())
  name String
  url  String @db.LongText

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model TaskAttachment {
  id   String  @id @default(uuid())
  name String?
  url  String  @db.LongText

  taskId    String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([taskId])
}

model Chapter {
  id          String  @id @default(uuid())
  title       String
  description String? @db.LongText
  isPublished Boolean @default(false)
  position    Int

  courseId String
  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)

  lessons Lesson[]
  quiz    Quiz?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model Task {
  id          String  @id @default(uuid())
  title       String
  content     String? @db.LongText
  isPublished Boolean @default(false)

  courseId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([courseId])
}

model UserProgress {
  id     String @id @default(uuid())
  userId String

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  isCompleted Boolean  @default(false)
  startedAt   Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  percentage  Float?   @default(0)

  @@unique([userId, lessonId])
  @@index([lessonId])
}

model UserQuizPoints {
  id     String @id @default(uuid())
  userId String

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id], onDelete: Cascade)

  points Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, quizId])
  @@index([quizId])
}

model Lesson {
  id          String  @id @default(uuid())
  title       String
  description String? @db.LongText
  videoUrl    String? @db.LongText
  position    Int
  isPublished Boolean @default(false)

  chapterId String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  userProgress UserProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model Quiz {
  id          String  @id @default(uuid())
  title       String
  description String? @db.LongText
  isPublished Boolean @default(false)
  userId      String? @default("nil")

  chapterId String  @unique
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)

  userQuizPoints UserQuizPoints[]
  questions      QuizQuestion[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([chapterId])
}

model Exam {
  id           String         @id @default(uuid())
  courseId     String
  course       Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  title        String
  description  String?
  userId       String?        @default("nil")
  questions    ExamQuestion[]
  certificate  Certificate[]
  passingScore Int?           @default(70)
  beforeScore  Float?         @default(0)
  afterScore   Float?         @default(0)
  isPublished  Boolean        @default(false)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  starterExam  Boolean        @default(false)

  @@index([courseId])
}

model ExamQuestion {
  id          String               @id @default(uuid())
  examId      String
  exam        Exam                 @relation(fields: [examId], references: [id], onDelete: Cascade)
  prompt      String
  position    Int
  options     ExamQuestionOption[]
  answer      String               @default("1")
  isPublished Boolean              @default(false)
  explanation String?
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@index([examId])
}

model QuizQuestion {
  id          String               @id @default(uuid())
  quizId      String
  quiz        Quiz                 @relation(fields: [quizId], references: [id], onDelete: Cascade)
  prompt      String
  options     QuizQuestionOption[]
  isPublished Boolean              @default(false)
  position    Int
  answer      String               @default("1")
  explanation String?              @db.Text
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt

  @@index([quizId])
}

model ExamOptions {
  id        String   @id @default(uuid())
  examId    String
  userId    String
  options   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ExamQuestionOption {
  id         String       @id @default(uuid())
  question   ExamQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  text       String
  position   Int          @default(autoincrement())

  @@index([questionId])
  @@index([position])
}

model QuizQuestionOption {
  id         String       @id @default(uuid())
  question   QuizQuestion @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  text       String
  position   Int          @default(autoincrement())

  @@index([questionId])
  @@index([position])
}

model Certificate {
  id             String   @id @default(uuid())
  exam           Exam     @relation(fields: [examId], references: [id], onDelete: Cascade)
  examId         String
  nameOfStudent  String?
  userId         String?
  courseTitle    String
  dateOfIssuance DateTime @default(now())

  @@index([examId])
}

model Message {
  id           String   @id @default(uuid())
  userId       String?  @default("nil")
  context      String   @db.LongText
  messageId    String?
  repliesCount Float?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  reply        Reply[]
}

model GoalsText {
  id        String   @id @default(uuid())
  context   String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PoliciesText {
  id        String   @id @default(uuid())
  context   String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model LibraryText {
  id        String   @id @default(uuid())
  context   String?  @db.LongText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserStats {
  id               String   @id
  lessonsCompleted Float?   @default(0)
  quizsCompleted   Float?   @default(0)
  examsCompleted   Float?   @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Reply {
  id        String   @id @default(uuid())
  userId    String?  @default("nil")
  context   String   @db.LongText
  replyId   String?
  messageId String?
  message   Message? @relation(fields: [messageId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([messageId])
}

model AssistPages {
  id     String  @id @default(uuid())
  userId String? @default("nil")

  introductionPage Boolean?
  goalsPage        Boolean?
  contactPage      Boolean?
  coursesPage      Boolean?
  messagesPage     Boolean?
  leaderboardPage  Boolean?
  libraryPage      Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
